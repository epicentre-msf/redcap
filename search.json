[{"path":"https://epicentre-msf.github.io/redcap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Barks. Author, maintainer.","code":""},{"path":"https://epicentre-msf.github.io/redcap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barks P (2024). redcap: R Utilities REDCap. R package version 0.2.0, https://github.com/epicentre-msf/redcap.","code":"@Manual{,   title = {redcap: R Utilities For REDCap},   author = {Patrick Barks},   year = {2024},   note = {R package version 0.2.0},   url = {https://github.com/epicentre-msf/redcap}, }"},{"path":"https://epicentre-msf.github.io/redcap/index.html","id":"redcap-r-utilities-for-interacting-with-redcap","dir":"","previous_headings":"","what":"R Utilities For REDCap","title":"R Utilities For REDCap","text":"R package interacting REDCap, inspired redcapAPI package Benjamin Nutter.","code":""},{"path":"https://epicentre-msf.github.io/redcap/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R Utilities For REDCap","text":"Outputs tibble-style data frames default, ensure record ID field always returned default, omit rows form-specific fields empty optional arguments resolving Double Data Entry single entry per record REDCap categorical variables class “character” (can optionally use “factor”) REDCap date variables class “Date” (“POSIXct” used datetime variables) New function fetch_database() vectorizes fetch_records() forms. Accepts additional functions arguments, e.g. deriving new variables customizing form names New function generate_queries() creates data validation queries based branching logic specified project codebook. can run using query_vec() function queryr. Note package tested REDCap versions 10.0 - 12.0","code":""},{"path":"https://epicentre-msf.github.io/redcap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Utilities For REDCap","text":"Install GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"epicentre-msf/redcap\")"},{"path":"https://epicentre-msf.github.io/redcap/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"R Utilities For REDCap","text":"","code":"library(redcap)  ### create an API connection (this project just used for testing) conn <- rconn(   url = Sys.getenv(\"REDCAP_API_URL\"),   token = Sys.getenv(\"REDCAP_PKG\") )  ### fetch REDCap version number redcap_version(conn) #> [1] \"12.0.29\"  ### fetch metadata tables df_dictionary <- meta_dictionary(conn) df_fields     <- meta_fields(conn) df_forms      <- meta_forms(conn) df_arms       <- meta_arms(conn) df_events     <- meta_events(conn) df_mapping    <- meta_mapping(conn) df_repeating  <- meta_repeating(conn)  ### fetch records (generally from a single form) df_records <- fetch_records(conn, forms = \"eligibility\")  ### fetch records from all forms (as a list of data frames, one per form) db_records <- fetch_database(conn)  ### project/user info df_info <- project_info(conn) df_users <- project_users(conn) df_dags <- project_dags(conn) df_users_dags <- project_users_dags(conn)  ### project backup/logging backup_xml <- project_xml(conn) backup_logs <- project_logging(conn)  ### generate queries based on branching logic in project codebook df_queries <- generate_queries(conn)  # run queries using the queryr package queries_out <- queryr::query_vec(   x = db_records,                 # REDCap database as list of data frames   cond = df_queries$query,        # query expressions   name = df_queries$query_id,     # name/identifier for each query   element = df_queries$form_name, # primary form for each query expression   cols_base = record_id,          # columns to always include in return   join_type = \"left\",             # join type if query refers to multiple forms   join_by = \"record_id\"           # join key if query refers to multiple forms )"},{"path":"https://epicentre-msf.github.io/redcap/index.html","id":"more-examples","dir":"","previous_headings":"","what":"More examples","title":"R Utilities For REDCap","text":"Customize form-specific names returned fetch_database() Pass additional functions fetch_database() act form","code":"### default element names returned by fetch_database() are REDCap form names db_records <- fetch_database(conn) names(db_records) #> [1] \"enrolment\"   \"eligibility\" \"followup\"  ### to customize we need a function that takes a vector of form names and # returns a vector of custom names recode_forms <- function(x) {   dplyr::recode(     x,     enrolment = \"ENR\", eligibility = \"ELG\", followup = \"FUP\"   ) }  db_records <- fetch_database(conn, names_fn = recode_forms) names(db_records) #> [1] \"ENR\" \"ELG\" \"FUP\" library(dplyr, warn.conflicts = FALSE) library(rlang)  ### for each form, find the column giving the date and time of form completion # (ends with \"_form_dt\"), and use it to derive a new date column form_date add_form_date  <- function(df) {   # find name of datetime col for given form   col_dt <- grep(\"_form_dt$\", names(df), value = TRUE)   # derive col form_date   dplyr::mutate(     df,     form_date = lubridate::as_date(!!ensym(col_dt)),     .after = \"record_id\"   ) }  db_records <- fetch_database(conn, fns = list(add_form_date)) db_records$enrolment[,1:5] # print first few cols to show new form_date column #> # A tibble: 3 × 5 #>   record_id form_date  redcap_event_name redcap_repeat_instrument redcap_repeat_instance #>   <chr>     <date>     <chr>             <chr>                                     <int> #> 1 0001      2020-12-01 Enrollment        <NA>                                         NA #> 2 0002      2020-11-25 Enrollment        <NA>                                         NA #> 3 0003      2020-12-11 Enrollment        <NA>                                         NA"},{"path":"https://epicentre-msf.github.io/redcap/reference/delete_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete records from a REDCap project — delete_records","title":"Delete records from a REDCap project — delete_records","text":"Delete records REDCap project","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/delete_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete records from a REDCap project — delete_records","text":"","code":"delete_records(conn, records)"},{"path":"https://epicentre-msf.github.io/redcap/reference/delete_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete records from a REDCap project — delete_records","text":"conn REDCap API connection object (created rconn) records Character vector record IDs delete","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/delete_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete records from a REDCap project — delete_records","text":"integer, number records successfully deleted","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/delete_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete records from a REDCap project — delete_records","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  # delete all records associated with IDs \"P004\" and \"P007\" delete_records(conn, records = c(\"P004\", \"P007\")) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","title":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","text":"Wrapper fetch_records vectorized forms (.e. instruments). Returns list whose elements tibble-style data frames corresponding requested form.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","text":"","code":"fetch_database(   conn,   forms = NULL,   names_fn = function(x) x,   records = NULL,   records_omit = NULL,   id_field = TRUE,   rm_empty = TRUE,   rm_empty_omit_calc = FALSE,   value_labs = TRUE,   value_labs_fetch_raw = FALSE,   header_labs = FALSE,   checkbox_labs = FALSE,   use_factors = FALSE,   times_chron = TRUE,   date_range_begin = NULL,   date_range_end = NULL,   fn_dates = parse_date,   fn_dates_args = list(orders = c(\"Ymd\", \"dmY\")),   fn_datetimes = lubridate::parse_date_time,   fn_datetimes_args = list(orders = c(\"Ymd HMS\", \"Ymd HM\")),   na = c(\"\", \"NA\"),   dag = TRUE,   batch_size = 100L,   batch_delay = 0.5,   form_delay = 0.5,   double_resolve = FALSE,   double_remove = FALSE,   double_sep = \"--\",   fns = NULL )"},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","text":"conn REDCap API connection object (created rconn) forms Character vector forms (.e. instruments) fetch data . Set NULL (default) fetch forms project. names_fn Function creating custom list element names given vector form names. Defaults identity function case element names correspond exactly form names. records Character vector record IDs fetch. Set NULL (default) fetch record IDs corresponding selected form(s). records_omit Character vector record IDs ignore. Set NULL (default) ignore records. given record ID appears argument records records_omit, argument records_omit takes precedence record returned. id_field Logical indicating whether always include 'record ID' field (defined REDCap first variable project codebook) API request, even specified argument fields. Defaults TRUE. record ID field defined within first form REDCap project, API requests forms include record ID field default (unless explicitly requested argument fields). id_field argument shortcut avoid always explicitly request record ID field. rm_empty Logical indicating whether remove rows fields relevant form(s) missing. See section Removing empty rows. Defaults TRUE. rm_empty_omit_calc Logical indicating whether exclude calculated fields assessment empty rows. Defaults FALSE. cases calculated fields can autopopulated certain records even relevant form truly empty, otherwise lead \"empty\" forms returned even rm_empty TRUE. Defaults FALSE. value_labs Logical indicating whether return value labels (TRUE) raw values (FALSE) categorical REDCap variables (radio, dropdown, yesno, checkbox). Defaults TRUE return labels. value_labs_fetch_raw Logical indicating whether request raw values categorical REDCap variables (radio, dropdown, yesno, checkbox), transformed labels separate step value_labs = TRUE. Primarily used troubleshooting issues REDCap API returning fewer records expected given certain combinations request parameters. header_labs Logical indicating whether export column names labels (TRUE) raw variable names (FALSE). Defaults FALSE return raw variable names. checkbox_labs Logical indicating whether export checkbox labels (TRUE) statuses (.e. \"Unchecked\" \"Checked\") (FALSE). Defaults FALSE export statuses. Note argument relevant value_labs TRUE — value_labs FALSE checkbox variables always exported raw values (usually \"0\"/\"1\"). use_factors Logical indicating whether categorical REDCap variables (radio, dropdown, yesno, checkbox) returned factors. Factor levels can either raw values (e.g. \"0\"/\"1\") labels (e.g. \"\"/\"Yes\") depending arguments value_labs checkbox_labs. Defaults FALSE. times_chron Logical indicating whether reclass time variables using chron::times (TRUE) leave character HH:MM format (FALSE). Defaults TRUE. Note applies variables REDCap type \"Time (HH:MM)\", \"Time (MM:SS)\". date_range_begin Fetch records created modified given date-time. Use format \"YYYY-MM-DD HH:MM:SS\" (e.g., \"2017-01-01 00:00:00\" January 1, 2017 midnight server time). Defaults NULL omit lower time limit. date_range_end Fetch records created modified given date-time. Use format \"YYYY-MM-DD HH:MM:SS\" (e.g., \"2017-01-01 00:00:00\" January 1, 2017 midnight server time). Defaults NULL omit lower time limit. fn_dates Function parse REDCap date variables. Defaults parse_date, internal wrapper lubridate::parse_date_time. date variables converted numeric (e.g. writing Excel), set e.g. lubridate::as_date convert back dates. fn_dates_args List arguments pass fn_dates. Can set empty list list() using function take arguments. fn_datetimes Function parse REDCap datetime variables. Defaults lubridate::parse_date_time. fn_datetimes_args List arguments pass fn_datetimes. Can set empty list list() using function take arguments. na Character vector strings interpret missing values. Passed readr::read_csv. Defaults c(\"\", \"NA\"). dag Logical indicating whether export redcap_data_access_group field (used project). Defaults TRUE. batch_size Number records fetch per batch. Defaults 100L. Set Inf NA fetch records . batch_delay Delay seconds fetching successive batches, give REDCap server time respond requests. Defaults 0.5. form_delay Delay seconds fetching successive forms, give REDCap server time respond requests. Defaults 0.5. double_resolve Logical indicating whether resolve double-entries (.e. records entered duplicate using REDCap's Double Data Entry module), filtering lowest entry number associated unique record. project uses double-entry, record IDs returned \"Export Records\" API request concatenation normal record ID entry number (1 2), normally separated \"–\" (e.g. \"P0285–1\"). resolve double entries move entry number portion ID column (entry), identify entries belonging unique record, retain row lowest entry number unique record. Unique records identified using record ID column (separating entry number portion), following columns present (accounting argument header_labs): redcap_event_name (Redcap Event), redcap_repeat_instrument (Repeat Instrument), redcap_repeat_instance (Repeat Instance). double_remove Logical indicating whether remove double-entries (.e. records entered duplicate using REDCap's Double Data Entry module), filtering records record ID field contains pattern double_sep (see next argument), merged records remain. double_sep double_resolve TRUE, string separator used split record ID field record ID entry number. Defaults \"–\". fns Optional list one functions apply list element (.e. form). used e.g. filter record IDs test entries, create derived variables, etc. function take data frame returned fetch_records first argument.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","text":"list tibble-style data frames corresponding requested forms.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_database.html","id":"removing-empty-rows","dir":"Reference","previous_headings":"","what":"Removing empty rows","title":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","text":"Depending database design, \"Export Records\" API request can sometimes return empty rows, representing forms data collected. example, forms F1 F2 part event, participant \"P001\" form data F2 F1, API request F1 include row participant \"P001\" F1-specific fields empty. argument rm_empty TRUE (default), fetch_records() filter rows. check empty rows based fields specific form(s) specified argument forms — .e. excludes record ID field, generic fields like redcap_event_name, redcap_data_access_group, etc. check empty rows also accounts checkbox fields, , argument checkbox_labs FALSE, set \"Unchecked\" empty form (rather missing per se).","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch records from multiple REDCap forms, returning separate list elements for each form — fetch_database","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  fetch_database(   conn,   forms = c(\"my_form1\", \"my_form2\", \"my_form3\") )  # use a custom fn to format the 'participant_id' column of each form # the function must take a data frame as its first argument format_ids <- function(x) {   x$participant_id <- toupper(x$participant_id)   x$participant_id <- gsub(\"[^[:alnum:]]+\", \"_\", x$participant_id)   x }  fetch_database(   conn,   forms = c(\"my_form1\", \"my_form2\", \"my_form3\"),   fns = list(format_ids) ) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch records for a REDCap project — fetch_records","title":"Fetch records for a REDCap project — fetch_records","text":"Execute \"Export Records\" API request fetch tibble-style data frame containing records one REDCap instruments.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch records for a REDCap project — fetch_records","text":"","code":"fetch_records(   conn,   forms = NULL,   events = NULL,   records = NULL,   records_omit = NULL,   fields = NULL,   id_field = TRUE,   rm_empty = TRUE,   rm_empty_omit_calc = FALSE,   value_labs = TRUE,   value_labs_fetch_raw = FALSE,   header_labs = FALSE,   checkbox_labs = FALSE,   use_factors = FALSE,   times_chron = TRUE,   date_range_begin = NULL,   date_range_end = NULL,   fn_dates = parse_date,   fn_dates_args = list(orders = c(\"Ymd\", \"dmY\")),   fn_datetimes = lubridate::parse_date_time,   fn_datetimes_args = list(orders = c(\"Ymd HMS\", \"Ymd HM\")),   na = c(\"\", \"NA\"),   dag = TRUE,   batch_size = 100L,   batch_delay = 0.5,   double_resolve = FALSE,   double_remove = FALSE,   double_sep = \"--\" )"},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch records for a REDCap project — fetch_records","text":"conn REDCap API connection object (created rconn) forms Character vector forms (.e. instruments) fetch data . Set NULL (default) fetch forms project. events Character vector events fetch. Must correspond selected forms. Set NULL (default) fetch events corresponding selected form(s). records Character vector record IDs fetch. Set NULL (default) fetch record IDs corresponding selected form(s). records_omit Character vector record IDs ignore. Set NULL (default) ignore records. given record ID appears argument records records_omit, argument records_omit takes precedence record returned. fields Character vector fields (.e. variables) fetch. Set NULL (default) fetch fields corresponding selected form(s). id_field Logical indicating whether always include 'record ID' field (defined REDCap first variable project codebook) API request, even specified argument fields. Defaults TRUE. record ID field defined within first form REDCap project, API requests forms include record ID field default (unless explicitly requested argument fields). id_field argument shortcut avoid always explicitly request record ID field. rm_empty Logical indicating whether remove rows fields relevant form(s) missing. See section Removing empty rows. Defaults TRUE. rm_empty_omit_calc Logical indicating whether exclude calculated fields assessment empty rows. Defaults FALSE. cases calculated fields can autopopulated certain records even relevant form truly empty, otherwise lead \"empty\" forms returned even rm_empty TRUE. Defaults FALSE. value_labs Logical indicating whether return value labels (TRUE) raw values (FALSE) categorical REDCap variables (radio, dropdown, yesno, checkbox). Defaults TRUE return labels. value_labs_fetch_raw Logical indicating whether request raw values categorical REDCap variables (radio, dropdown, yesno, checkbox), transformed labels separate step value_labs = TRUE. Primarily used troubleshooting issues REDCap API returning fewer records expected given certain combinations request parameters. header_labs Logical indicating whether export column names labels (TRUE) raw variable names (FALSE). Defaults FALSE return raw variable names. checkbox_labs Logical indicating whether export checkbox labels (TRUE) statuses (.e. \"Unchecked\" \"Checked\") (FALSE). Defaults FALSE export statuses. Note argument relevant value_labs TRUE — value_labs FALSE checkbox variables always exported raw values (usually \"0\"/\"1\"). use_factors Logical indicating whether categorical REDCap variables (radio, dropdown, yesno, checkbox) returned factors. Factor levels can either raw values (e.g. \"0\"/\"1\") labels (e.g. \"\"/\"Yes\") depending arguments value_labs checkbox_labs. Defaults FALSE. times_chron Logical indicating whether reclass time variables using chron::times (TRUE) leave character HH:MM format (FALSE). Defaults TRUE. Note applies variables REDCap type \"Time (HH:MM)\", \"Time (MM:SS)\". date_range_begin Fetch records created modified given date-time. Use format \"YYYY-MM-DD HH:MM:SS\" (e.g., \"2017-01-01 00:00:00\" January 1, 2017 midnight server time). Defaults NULL omit lower time limit. date_range_end Fetch records created modified given date-time. Use format \"YYYY-MM-DD HH:MM:SS\" (e.g., \"2017-01-01 00:00:00\" January 1, 2017 midnight server time). Defaults NULL omit lower time limit. fn_dates Function parse REDCap date variables. Defaults parse_date, internal wrapper lubridate::parse_date_time. date variables converted numeric (e.g. writing Excel), set e.g. lubridate::as_date convert back dates. fn_dates_args List arguments pass fn_dates. Can set empty list list() using function take arguments. fn_datetimes Function parse REDCap datetime variables. Defaults lubridate::parse_date_time. fn_datetimes_args List arguments pass fn_datetimes. Can set empty list list() using function take arguments. na Character vector strings interpret missing values. Passed readr::read_csv. Defaults c(\"\", \"NA\"). dag Logical indicating whether export redcap_data_access_group field (used project). Defaults TRUE. batch_size Number records fetch per batch. Defaults 100L. Set Inf NA fetch records . batch_delay Delay seconds fetching successive batches, give REDCap server time respond requests. Defaults 0.5. double_resolve Logical indicating whether resolve double-entries (.e. records entered duplicate using REDCap's Double Data Entry module), filtering lowest entry number associated unique record. project uses double-entry, record IDs returned \"Export Records\" API request concatenation normal record ID entry number (1 2), normally separated \"–\" (e.g. \"P0285–1\"). resolve double entries move entry number portion ID column (entry), identify entries belonging unique record, retain row lowest entry number unique record. Unique records identified using record ID column (separating entry number portion), following columns present (accounting argument header_labs): redcap_event_name (Redcap Event), redcap_repeat_instrument (Repeat Instrument), redcap_repeat_instance (Repeat Instance). double_remove Logical indicating whether remove double-entries (.e. records entered duplicate using REDCap's Double Data Entry module), filtering records record ID field contains pattern double_sep (see next argument), merged records remain. double_sep double_resolve TRUE, string separator used split record ID field record ID entry number. Defaults \"–\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch records for a REDCap project — fetch_records","text":"tibble-style data frame containing requested records","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_records.html","id":"removing-empty-rows","dir":"Reference","previous_headings":"","what":"Removing empty rows","title":"Fetch records for a REDCap project — fetch_records","text":"Depending database design, \"Export Records\" API request can sometimes return empty rows, representing forms data collected. example, forms F1 F2 part event, participant \"P001\" form data F2 F1, API request F1 include row participant \"P001\" F1-specific fields empty. argument rm_empty TRUE (default), fetch_records() filter rows. check empty rows based fields specific form(s) specified argument forms — .e. excludes record ID field, generic fields like redcap_event_name, redcap_data_access_group, etc. check empty rows also accounts checkbox fields, , argument checkbox_labs FALSE, set \"Unchecked\" empty form (rather missing per se).","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/fetch_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch records for a REDCap project — fetch_records","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  fetch_records(conn, forms = \"my_form\") } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/generate_queries.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data validation queries for a REDCap project based on branching logic specified in the project codebook — generate_queries","title":"Generate data validation queries for a REDCap project based on branching logic specified in the project codebook — generate_queries","text":"Generates two types data validation queries using project codebook (see meta_dictionary) translate_logic: Field missing: Branching logic evaluates TRUE (specified), field missing. default applies required fields (required_field == \"y\") (can modify argument non_required). Field missing: Branching logic evaluates FALSE field missing. Applies field branching logic.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/generate_queries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data validation queries for a REDCap project based on branching logic specified in the project codebook — generate_queries","text":"","code":"generate_queries(   conn,   forms = NULL,   dict = meta_dictionary(conn, forms = forms, expand_checkbox = FALSE),   lang = \"en\",   query_types = \"both\",   non_required = FALSE,   drop_redundant = FALSE,   field_nchar_max = 80L,   on_error = \"warn\" )"},{"path":"https://epicentre-msf.github.io/redcap/reference/generate_queries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data validation queries for a REDCap project based on branching logic specified in the project codebook — generate_queries","text":"conn REDCap API connection object (created rconn) forms Character vector forms (.e. instruments) include. Set NULL (default) generate queries forms project. dict Metadata dictionary. default fetched automatically meta_dictionary, included argument allow user modify dictionary passing generate_queries (e.g. correct bugs branching logic). passing modified version, make sure initially fetched argument expand_checkbox = FALSE. lang Query language, either English (\"en\") French (\"fr\"). Defaults \"en\". query_types type queries generate (see Description ). Options \"missing\", \"missing\", \"\". Defaults \"\". non_required Logical indicating whether include non-required fields queries type \"Field missing\". Defaults FALSE. drop_redundant Logical indicating whether simplify expressions removing redundant components expressions test equality inequality variable. E.g.:var == \"X\" & var != \"\" becomes var == \"X\" field_nchar_max Integer indicating maximum number characters allow field name labels truncated appended \"...\". Defaults 80L. on_error one elements statements translated valid R expressions? Options \"ignore\" (return NA relevant elements), \"warn\" (return NA relevant elements give warning), \"fail\" (throw error). Defaults \"warn\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/generate_queries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data validation queries for a REDCap project based on branching logic specified in the project codebook — generate_queries","text":"tibble-style data frame specifying queries, following 7 columns: query_id Unique query identifier based form name integer sequence field_name Field name (REDCap dictionary, see meta_dictionary) form_name Form name (REDCap dictionary) required required field REDCap dictionary (\"y\" <NA>) ? description Description query (e.g. \"Missing: [Signed consent forms?]\") suggestion Suggestion query resolution. human-readable translation query expression (e.g. [participant 18 years older?] \"Yes\", item [Signed consent forms?] missing) branching_logic Branching logic given field (REDCap dictionary) query R-style query expression (can evaluated queryr::query)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/import_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Import records into a REDCap project — import_records","title":"Import records into a REDCap project — import_records","text":"Import records REDCap project","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/import_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import records into a REDCap project — import_records","text":"","code":"import_records(   conn,   data,   type = c(\"flat\", \"eav\"),   overwrite = \"normal\",   return = \"count\" )"},{"path":"https://epicentre-msf.github.io/redcap/reference/import_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import records into a REDCap project — import_records","text":"conn REDCap API connection object (created rconn) data data.frame containing record data import REDCap type One : \"flat\": data wide-form one record per row (default) \"eav\": data long-form one row per participant/instance/field (data columns \"record\", \"field_name\", \"value\", longitudinal also \"redcap_event_name\" \"redcap_repeat_instance\") overwrite Overwrite behaviour. Either \"normal\" prevent missing values overwriting data, \"overwrite\" allow data overwritten missing values. Defaults \"normal\". return return. Use \"count\" return count imported records, \"ids\" return vector IDs imported, \"nothing\" return nothing. Defaults \"count\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/import_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import records into a REDCap project — import_records","text":"Depends argument return. Either count imported records, vector record IDs, nothing.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Export REDCap project arms — meta_arms","title":"Export REDCap project arms — meta_arms","text":"Execute \"Export Arms\" API request fetch \"arms\" (number name) associated REDCap project.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export REDCap project arms — meta_arms","text":"","code":"meta_arms(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export REDCap project arms — meta_arms","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export REDCap project arms — meta_arms","text":"tibble-style data frame 2 columns: arm_num name","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export REDCap project arms — meta_arms","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_arms(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch variable dictionary for a REDCap project — meta_dictionary","title":"Fetch variable dictionary for a REDCap project — meta_dictionary","text":"Execute \"Export Metadata (Data Dictionary)\" API request fetch tibble-style data frame containing project codebook (field names, types, labels, choices, validation, etc.).","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch variable dictionary for a REDCap project — meta_dictionary","text":"","code":"meta_dictionary(   conn,   forms = NULL,   expand_checkbox = TRUE,   add_complete = FALSE,   cols_omit = c(\"section_header\", \"custom_alignment\", \"question_number\",     \"matrix_group_name\", \"matrix_ranking\") )"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch variable dictionary for a REDCap project — meta_dictionary","text":"conn REDCap API connection object (created rconn) forms Character vector forms (.e. instruments) include return. Set NULL (default) return dictionary entries forms project. expand_checkbox Logical indicating whether expand checkbox variables. Defaults TRUE. Unlike \"Export Records\" API request (see fetch_records), returns 1 column checkbox option, \"Export Metadata (Data Dictionary)\" request returns single row field — including checkbox fields. Thus, field_name field_label entries checkbox variables data dictionary never exactly match respective column names values returned fetch_records. expand_checkbox TRUE, rows checkbox fields expanded 1 row per checkbox option, dictionary entries field_name, field_label, choices always match relevant entries returned fetch_records. add_complete Logical indicating whether add \"{form}_complete\" fields dictionary, one form included return. field_type \"radio\" possible choices \"0, Incomplete | 1, Unverified | 2, Complete\". Defaults FALSE. cols_omit Character vector dictionary columns omit return brevity. Set NULL return columns.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch variable dictionary for a REDCap project — meta_dictionary","text":"tibble-style data frame containing project dictionary. Note returned column names shortened versions original column names returned API:","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch variable dictionary for a REDCap project — meta_dictionary","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_dictionary(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch event names and labels for a REDCap project — meta_events","title":"Fetch event names and labels for a REDCap project — meta_events","text":"Execute \"Export Events\" API request fetch tibble-style data frame containing event names labels. Note request type available 'classic projects', event details exported.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch event names and labels for a REDCap project — meta_events","text":"","code":"meta_events(conn, on_error = \"fail\")"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch event names and labels for a REDCap project — meta_events","text":"conn REDCap API connection object (created rconn) on_error handle errors returned API (e.g. events exported classic projects). Set \"fail\" halt execution return API error message, \"null\" ignore error return NULL. Defaults \"fail\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch event names and labels for a REDCap project — meta_events","text":"tibble-style data frame 7 columns: event_name arm_num day_offset offset_min offset_max unique_event_name custom_event_label","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch event names and labels for a REDCap project — meta_events","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_events(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch field option values and labels for factor-type variables in a REDCap project — meta_factors","title":"Fetch field option values and labels for factor-type variables in a REDCap project — meta_factors","text":"Converts field options labels metadata dictionary (see meta_dictionary), 1 row per variable field options compact string-form, long form 1 row per option. E.g.: Dictionary version (1 row per variable): Long format (1 row per option):","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch field option values and labels for factor-type variables in a REDCap project — meta_factors","text":"","code":"meta_factors(   conn,   forms = NULL,   expand_checkbox = TRUE,   add_complete = FALSE,   types = c(\"radio\", \"yesno\", \"dropdown\", \"checkbox\") )"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch field option values and labels for factor-type variables in a REDCap project — meta_factors","text":"conn REDCap API connection object (created rconn) forms Character vector forms (.e. instruments) include. Set NULL (default) return field options forms project. expand_checkbox Logical indicating whether expand checkbox variables. Defaults TRUE. Unlike \"Export Records\" API request (see fetch_records), returns 1 column checkbox option, \"Export Metadata (Data Dictionary)\" request returns single row field — including checkbox fields. Thus, field_name field_label entries checkbox variables data dictionary never exactly match respective column names values returned fetch_records. expand_checkbox TRUE, rows checkbox fields expanded 1 row per checkbox option, dictionary entries field_name, field_label, choices always match relevant entries returned fetch_records. add_complete Logical indicating whether add \"{form}_complete\" fields dictionary, one form included return. field_type \"radio\" possible choices \"0, Incomplete | 1, Unverified | 2, Complete\". Defaults FALSE. types Character vector variable types return field options .  Defaults c(\"radio\", \"yesno\", \"dropdown\", \"checkbox\").","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch field option values and labels for factor-type variables in a REDCap project — meta_factors","text":"tibble-style data frame 6 columns: field_name form_name field_type field_label value label","code":""},{"path":[]},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch field option values and labels for factor-type variables in a REDCap project — meta_factors","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_factors(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch exported field names for a REDCap project — meta_fields","title":"Fetch exported field names for a REDCap project — meta_fields","text":"Execute \"Export List Export Field Names\" API request fetch tibble-style data frame containing field (.e. variable) names listed project codebook (column original_field_name) corresponding exported variable name(s) (column export_field_name). Original exported field names identical except case checkbox-type variables. given checkbox variable (e.g. \"patient_status\") single entry codebook (.e. field_name = \"patient_status\"), exported multiple variables — one possible choice value.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch exported field names for a REDCap project — meta_fields","text":"","code":"meta_fields(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch exported field names for a REDCap project — meta_fields","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch exported field names for a REDCap project — meta_fields","text":"tibble-style data frame 3 columns: original_field_name choice_value export_field_name","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch exported field names for a REDCap project — meta_fields","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_fields(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_forms.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch instrument names and labels for a REDCap project — meta_forms","title":"Fetch instrument names and labels for a REDCap project — meta_forms","text":"Execute \"Export Instrument (Data Entry Forms)\" API request fetch tibble-style data frame containing instrument names labels.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_forms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch instrument names and labels for a REDCap project — meta_forms","text":"","code":"meta_forms(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_forms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch instrument names and labels for a REDCap project — meta_forms","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_forms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch instrument names and labels for a REDCap project — meta_forms","text":"tibble-style data frame 2 columns: instrument_name instrument_label","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_forms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch instrument names and labels for a REDCap project — meta_forms","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_forms(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch instrument-event mappings for a REDCap project — meta_mapping","title":"Fetch instrument-event mappings for a REDCap project — meta_mapping","text":"Execute \"Export Instrument-Event Mappings\" API request fetch tibble-style data frame containing mapping instruments events. Note request type available 'classic projects', event details exported.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch instrument-event mappings for a REDCap project — meta_mapping","text":"","code":"meta_mapping(conn, on_error = \"fail\")"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch instrument-event mappings for a REDCap project — meta_mapping","text":"conn REDCap API connection object (created rconn) on_error handle errors returned API (e.g. events exported classic projects). Set \"fail\" halt execution return API error message, \"null\" ignore error return NULL. Defaults \"fail\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch instrument-event mappings for a REDCap project — meta_mapping","text":"tibble-style data frame 3 columns: arm_num unique_event_name form","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch instrument-event mappings for a REDCap project — meta_mapping","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_mapping(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_repeating.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch repeating instrument names and labels for a REDCap project — meta_repeating","title":"Fetch repeating instrument names and labels for a REDCap project — meta_repeating","text":"Execute \"Export Repeating Instruments Events\" API request fetch tibble-style data frame containing repeating instrument names labels.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_repeating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch repeating instrument names and labels for a REDCap project — meta_repeating","text":"","code":"meta_repeating(conn, on_error = \"fail\")"},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_repeating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch repeating instrument names and labels for a REDCap project — meta_repeating","text":"conn REDCap API connection object (created rconn) on_error handle errors returned API (e.g. events exported classic projects). Set \"fail\" halt execution return API error message, \"null\" ignore error return NULL. Defaults \"fail\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_repeating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch repeating instrument names and labels for a REDCap project — meta_repeating","text":"tibble-style data frame 2 columns: instrument_name instrument_label","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/meta_repeating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch repeating instrument names and labels for a REDCap project — meta_repeating","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  meta_repeating(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a REDCap project log file to a tidy data frame — parse_logging","title":"Convert a REDCap project log file to a tidy data frame — parse_logging","text":"REDCap project log files complicated format multiple types information contained single column. example column action contains relevant record ID, type action taken (e.g. Updated / Created / Deleted), sometimes details source action (e.g. API / Import / Automatic field calculation). details column contains string variable/value combinations describing changes (e.g. \"var1 = '0', var2 = '1', var3(1) = checked\"), may also contain relevant repeat instance number (e.g. \"[instance = 3]\"). parse_logging() function tidies log file splitting record ID, action, action type, repeat instance separate columns. Optionally, string variable/value changes details column may transformed long format yield single row combination variable value. Note function deals log entries type Created / Deleted / Updated Record. log entries (e.g. Data Export, Manage/Design, Edited Role, User Assigned Role) filtered .","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a REDCap project log file to a tidy data frame — parse_logging","text":"","code":"parse_logging(x, format_long = FALSE, dict = NULL)"},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a REDCap project log file to a tidy data frame — parse_logging","text":"x REDCap project log file (data frame), e.g. returned project_logging format_long Logical indicating whether transform log file long format, one row per variable-value combination. Defaults FALSE. dict REDCap metadata dictionary (data frame), e.g. returned meta_dictionary. needed argument format_long TRUE.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a REDCap project log file to a tidy data frame — parse_logging","text":"tibble-style data frame 8 columns: rowid Row number based original log file. may gaps rows excluded output reflected action type create / delete / update. timestamp unchanged original log file username unchanged original log file action One \"Created Record\", \"Deleted Record\", \"Updated Record\", extracted original details column action_type Parenthetical details, , extracted original action column (e.g. \"(API)\", \"(import)\", \"(Auto calculation)\") record_id Record ID, extracted original action column redcap_repeat_instance Instance number (integer), extracted original details column. Note 1st instances explicitly specified log file appear NA details String variable value pairs (e.g. \"var1 = '0', var2 = '1', var3(1) = checked\"), reflecting data modified argument format_long TRUE details column replaced three columns: form_name Form name, joined metadata dictionary based variable field_name. <NA> cases field name changed removed therefore appear dictionary, fields associated specific form like redcap_data_access_group. field_name Field name, extracted original details column value Value, extracted original details column","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a REDCap project log file to a tidy data frame — parse_logging","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  parse_logging(project_logging(conn)) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a REDCap project XML file to a tidy data frame of project records — parse_xml","title":"Convert a REDCap project XML file to a tidy data frame of project records — parse_xml","text":"Extract records REDCap project XML file (e.g. returned project_xml) assemble tidy long-form data frame, one row combination record x field x event x instance.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a REDCap project XML file to a tidy data frame of project records — parse_xml","text":"","code":"parse_xml(x)"},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a REDCap project XML file to a tidy data frame of project records — parse_xml","text":"x REDCap project XML obect class xml_document, e.g. returned project_xml","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a REDCap project XML file to a tidy data frame of project records — parse_xml","text":"tibble-style data frame 6 columns: record_id form redcap_event redcap_repeat_instance field value","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/parse_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a REDCap project XML file to a tidy data frame of project records — parse_xml","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  parse_xml(project_xml(conn)) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_dags.html","id":null,"dir":"Reference","previous_headings":"","what":"Export REDCap user information — project_dags","title":"Export REDCap user information — project_dags","text":"Execute \"Export Data Access Groups (DAGs)\" API request fetch DAGs (labels code names) associated REDCap project.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_dags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export REDCap user information — project_dags","text":"","code":"project_dags(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_dags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export REDCap user information — project_dags","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_dags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export REDCap user information — project_dags","text":"tibble-style data frame 2 columns: data_access_group_name unique_group_name","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_dags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export REDCap user information — project_dags","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  project_dags(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Export REDCap Project information — project_info","title":"Export REDCap Project information — project_info","text":"Execute \"Export Project Info\" API request fetch project-related details (e.g. title, creation time, production status, language, etc.) corresponding REDCap project.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export REDCap Project information — project_info","text":"","code":"project_info(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export REDCap Project information — project_info","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export REDCap Project information — project_info","text":"tibble-style data frame containing columns returned \"Export Project Info\" API request","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export REDCap Project information — project_info","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  project_info(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Export project logging (audit trail) for a REDCap project — project_logging","title":"Export project logging (audit trail) for a REDCap project — project_logging","text":"Execute \"Export Logging\" API request export logging (audit trail) changes made project, including data exports, data changes, project metadata changes, modification user rights, etc.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export project logging (audit trail) for a REDCap project — project_logging","text":"","code":"project_logging(   conn,   type = NULL,   user = NULL,   record = NULL,   time_start = NULL,   time_end = NULL,   timestamp_to_posix = TRUE )"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export project logging (audit trail) for a REDCap project — project_logging","text":"conn REDCap API connection object (created rconn) type Type logging return. Defaults NULL return types. Specific logging types include: \"export\": Data export \"manage\": Manage/Design \"user\": User role created-updated-deleted \"record\": Record created-updated-deleted \"record_add\": Record created () \"record_edit\": Record updated () \"record_delete\": Record deleted () \"lock_record\": Record locking & e-signatures \"page_view\": Page Views user REDCap username fetch logs . Defaults NULL fetch logs relating users. Note , current API version (10.8.5), possible pass character vector multiple usernames (.e. one user per request, NULL ). record Record ID fetch logs . Defaults NULL fetch logs relating record IDs. Note , current API version (10.8.5), possible pass character vector multiple record IDs (.e. one record per request, NULL ). time_start Fetch logs given date-time. Use format \"YYYY-MM-DD HH:MM\". Defaults NULL omit lower time limit. time_end Fetch logs given date-time. Use format \"YYYY-MM-DD HH:MM\". Defaults NULL omit upper time limit. timestamp_to_posix Logical indicating whether convert timestamp column class POSIXct using lubridate::as_datetime. Defaults TRUE.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_logging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export project logging (audit trail) for a REDCap project — project_logging","text":"tibble-style data frame 4 columns: timestamp username actions details","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_logging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export project logging (audit trail) for a REDCap project — project_logging","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  project_logging(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users.html","id":null,"dir":"Reference","previous_headings":"","what":"Export REDCap user information — project_users","title":"Export REDCap user information — project_users","text":"Execute \"Export Users\" API request fetch user-related details (e.g. username, email, access permissions, etc.) corresponding REDCap project.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export REDCap user information — project_users","text":"","code":"project_users(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export REDCap user information — project_users","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export REDCap user information — project_users","text":"tibble-style data frame containing columns returned \"Export Users\" API request","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export REDCap user information — project_users","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  project_users(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users_dags.html","id":null,"dir":"Reference","previous_headings":"","what":"Export REDCap mapping between users and Data Access Groups (DAGs) — project_users_dags","title":"Export REDCap mapping between users and Data Access Groups (DAGs) — project_users_dags","text":"Execute \"Export User-DAG Assignments\" API request fetch mapping users Data Access Groups (DAGs) associated REDCap project.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users_dags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export REDCap mapping between users and Data Access Groups (DAGs) — project_users_dags","text":"","code":"project_users_dags(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users_dags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export REDCap mapping between users and Data Access Groups (DAGs) — project_users_dags","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users_dags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export REDCap mapping between users and Data Access Groups (DAGs) — project_users_dags","text":"tibble-style data frame 2 columns: username redcap_data_access_group","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_users_dags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export REDCap mapping between users and Data Access Groups (DAGs) — project_users_dags","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  project_users_dags(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Export REDCap Project XML file — project_xml","title":"Export REDCap Project XML file — project_xml","text":"Execute \"Export Entire Project REDCap XML File\" API request fetch metadata (optionally also data records) corresponding REDCap project.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export REDCap Project XML file — project_xml","text":"","code":"project_xml(   conn,   meta_only = FALSE,   records = NULL,   fields = NULL,   events = NULL,   filter_logic = NULL,   export_dag = FALSE,   export_survey = FALSE,   export_files = FALSE )"},{"path":"https://epicentre-msf.github.io/redcap/reference/project_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export REDCap Project XML file — project_xml","text":"conn REDCap API connection object (created rconn) meta_only Logical indicating whether fetch project metadata (TRUE) metadata data records (FALSE). Defaults FALSE fetch metadata data. records Optional character vector specific record IDs fetch record data . used meta_only = FALSE. fields Optional character vector specific fields fetch record data . used meta_only = FALSE. events Optional character vector specific events fetch record data . used meta_only = FALSE. filter_logic Optional character string containing REDCap-style expression used filter records returned API (e.g. \"[age] > 30\") export_dag Logical indicating whether export redcap_data_access_group field. Defaults FALSE. export_survey Logical indicating whether export survey identifier timestamp fields, surveys used project. Defaults FALSE. export_files Logical indicating whether export uploaded files. Note may lead large exports. Defaults FALSE.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export REDCap Project XML file — project_xml","text":"object class xml_document","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/project_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export REDCap Project XML file — project_xml","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  project_xml(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/rconn.html","id":null,"dir":"Reference","previous_headings":"","what":"Connection to a REDCap Database — rconn","title":"Connection to a REDCap Database — rconn","text":"Creates object class \"rconn\" containing URL token used access REDCap project API.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/rconn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection to a REDCap Database — rconn","text":"","code":"rconn(url, token, config = httr::config())"},{"path":"https://epicentre-msf.github.io/redcap/reference/rconn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection to a REDCap Database — rconn","text":"url URL REDCap database API token REDCap project API token (good practice set using environmental variable, e.g. Sys.getenv). config Optional configuration settings passed httr::POST. Defaults httr::config().","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/rconn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connection to a REDCap Database — rconn","text":"object class \"rconn\", passed first argument redcap functions.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/rconn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connection to a REDCap Database — rconn","text":"","code":"conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )"},{"path":"https://epicentre-msf.github.io/redcap/reference/reclass.html","id":null,"dir":"Reference","previous_headings":"","what":"Reclass columns of a data frame to match classes specified in a metadata dictionary — reclass","title":"Reclass columns of a data frame to match classes specified in a metadata dictionary — reclass","text":"Reclass columns data frame match classes specified metadata dictionary","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/reclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reclass columns of a data frame to match classes specified in a metadata dictionary — reclass","text":"","code":"reclass(   x,   dict,   use_factors = FALSE,   value_labs = TRUE,   header_labs = FALSE,   times_chron = TRUE,   fn_dates = parse_date,   fn_dates_args = list(orders = c(\"Ymd\", \"dmY\")),   fn_datetimes = lubridate::parse_date_time,   fn_datetimes_args = list(orders = c(\"Ymd HMS\", \"Ymd HM\")) )"},{"path":"https://epicentre-msf.github.io/redcap/reference/reclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reclass columns of a data frame to match classes specified in a metadata dictionary — reclass","text":"x data frame representing REDCap form dict metadata dictionary use_factors Logical indicating whether categorical REDCap variables (radio, dropdown, yesno, checkbox) returned factors. Factor levels can either raw values (e.g. \"0\"/\"1\") labels (e.g. \"\"/\"Yes\") depending arguments value_labs checkbox_labs. Defaults FALSE. value_labs Logical indicating whether return value labels (TRUE) raw values (FALSE) categorical REDCap variables (radio, dropdown, yesno, checkbox). Defaults TRUE return labels. header_labs Logical indicating whether export column names labels (TRUE) raw variable names (FALSE). Defaults FALSE return raw variable names. times_chron Logical indicating whether reclass time variables using chron::times (TRUE) leave character HH:MM format (FALSE). Defaults TRUE. Note applies variables REDCap type \"Time (HH:MM)\", \"Time (MM:SS)\". fn_dates Function parse REDCap date variables. Defaults parse_date, internal wrapper lubridate::parse_date_time. date variables converted numeric (e.g. writing Excel), set e.g. lubridate::as_date convert back dates. fn_dates_args List arguments pass fn_dates. Can set empty list list() using function take arguments. fn_datetimes Function parse REDCap datetime variables. Defaults lubridate::parse_date_time. fn_datetimes_args List arguments pass fn_datetimes. Can set empty list list() using function take arguments.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/recode_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between values and labels for factor-type variables (e.g. yes/no, radio, dropdown, checkbox) — recode_labels","title":"Convert between values and labels for factor-type variables (e.g. yes/no, radio, dropdown, checkbox) — recode_labels","text":"Convert values labels factor-type variables (e.g. yes/, radio, dropdown, checkbox)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/recode_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between values and labels for factor-type variables (e.g. yes/no, radio, dropdown, checkbox) — recode_labels","text":"","code":"recode_labels(   x,   conn,   dict = redcap::meta_dictionary(conn, add_complete = TRUE),   convert_to = c(\"labels\", \"values\"),   types = c(\"radio\", \"yesno\", \"dropdown\", \"checkbox\"),   header_labs = FALSE )"},{"path":"https://epicentre-msf.github.io/redcap/reference/recode_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between values and labels for factor-type variables (e.g. yes/no, radio, dropdown, checkbox) — recode_labels","text":"x Data frame representing REDCap form (e.g. previous export using fetch_records) conn REDCap API connection object (created rconn) dict REDCap metadata dictionary. Defaults fetching current version meta_dictionary convert_to Convert values labels (\"labels\") labels values (\"values\") types Types REDCap variables convert, based column \"field_type\" metadata dictionary. Defaults c(\"radio\", \"yesno\", \"dropdown\", \"checkbox\"). header_labs Logical indicating whether column names x labels (TRUE) raw variable names (FALSE). Default assumes header raw variable names (.e. FALSE).","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap-package.html","id":null,"dir":"Reference","previous_headings":"","what":"redcap: R Utilities For REDCap — redcap-package","title":"redcap: R Utilities For REDCap — redcap-package","text":"R utilities interacting REDCap API.","code":""},{"path":[]},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"redcap: R Utilities For REDCap — redcap-package","text":"Maintainer: Patrick Barks patrick.barks@epicentre.msf.org","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch the REDCap database version used for a particular project — redcap_version","title":"Fetch the REDCap database version used for a particular project — redcap_version","text":"Execute \"Export REDCap version\" API request","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch the REDCap database version used for a particular project — redcap_version","text":"","code":"redcap_version(conn)"},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch the REDCap database version used for a particular project — redcap_version","text":"conn REDCap API connection object (created rconn)","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch the REDCap database version used for a particular project — redcap_version","text":"character string","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/redcap_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch the REDCap database version used for a particular project — redcap_version","text":"","code":"if (FALSE) { # \\dontrun{ conn <- rconn(   url = \"https://redcap.msf.fr/api/\",   token = Sys.getenv(\"MY_REDCAP_TOKEN\") )  redcap_version(conn) } # }"},{"path":"https://epicentre-msf.github.io/redcap/reference/translate_logic.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate REDCap branching logic into R expressions — translate_logic","title":"Translate REDCap branching logic into R expressions — translate_logic","text":"Translate REDCap branching logic expressions evaluable R. E.g.","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/translate_logic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate REDCap branching logic into R expressions — translate_logic","text":"","code":"translate_logic(   x,   use_value_labs = TRUE,   use_header_labs = FALSE,   use_is_na = TRUE,   use_in = TRUE,   drop_redundant = FALSE,   field_nchar_max = 80L,   meta_factors = NULL,   meta_dictionary = NULL,   on_error = \"warn\" )"},{"path":"https://epicentre-msf.github.io/redcap/reference/translate_logic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate REDCap branching logic into R expressions — translate_logic","text":"x character vector REDCap branching logic statements use_value_labs Logical indicating whether replace factor option values labels (based mapping defined meta_factors). E.g.:y == '1' becomes y == 'Yes' use_header_labs Logical indicating whether use labels instead variable names column names (based mapping defined meta_dictionary). E.g.:age >= 18 becomes \"Participant's age\" >= 18 use_is_na Logical indicating whether replace REDCap-style tests missingness .na. E.g.:y == \"\" becomes .na(y)y != \"\" becomes !.na(y) use_in Logical indicating whether replace instances == != associated factor-type variables (defined meta_factors) %%. E.g.:y == 'Yes' becomes y %% 'Yes'y != 'Yes' becomes !y %% 'Yes' drop_redundant Logical indicating whether simplify expressions removing redundant components expressions test equality inequality variable. E.g.:var == \"X\" & var != \"\" becomes var == \"X\" field_nchar_max Integer indicating maximum number characters allow field name labels truncated appended \"...\". Defaults 80L. meta_factors data frame containing variable names (column field_name) corresponding values (column value) labels (column label) factor-type variables. Fetch meta_factors. needed either use_value_labs use_in TRUE. meta_dictionary data frame containing variable names (column field_name) labels (column field_label). Fetch meta_dictionary. needed use_header_labs TRUE. on_error one elements statements translated valid R expressions? Options \"ignore\" (return NA relevant elements), \"warn\" (return NA relevant elements give warning), \"fail\" (throw error). Defaults \"warn\".","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/translate_logic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate REDCap branching logic into R expressions — translate_logic","text":"character vector R-style expressions","code":""},{"path":"https://epicentre-msf.github.io/redcap/reference/translate_logic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate REDCap branching logic into R expressions — translate_logic","text":"","code":"# normally would fetch factor metadata with redcap::meta_factors(), but here # we'll create a simple example by hand df_factors <- data.frame(   field_name = c(\"head_household\", \"head_household\"),   value = c(\"0\", \"1\"),   label = c(\"No\", \"Yes\"),   stringsAsFactors = FALSE )  redcap_logic <- \"head_household=1 and age<>\\\"\\\"\" translate_logic(redcap_logic, meta_factors = df_factors) #> [1] \"head_household %in% \\\"Yes\\\" & !is.na(age)\""},{"path":"https://epicentre-msf.github.io/redcap/news/index.html","id":"redcap-020","dir":"Changelog","previous_headings":"","what":"redcap 0.2.0","title":"redcap 0.2.0","text":"records fetched batches default fetch_records()","code":""},{"path":"https://epicentre-msf.github.io/redcap/news/index.html","id":"redcap-0109000","dir":"Changelog","previous_headings":"","what":"redcap 0.1.0.9000","title":"redcap 0.1.0.9000","text":"project_logging() now returns column timestamp class POSIXct default. New logical argument timestamp_to_posix control. Implemented additional API methods new functions: meta_arms() project_dags() project_info() project_users() project_users_dags()","code":""},{"path":"https://epicentre-msf.github.io/redcap/news/index.html","id":"redcap-010","dir":"Changelog","previous_headings":"","what":"redcap 0.1.0","title":"redcap 0.1.0","text":"Initial release","code":""}]
